-- #############################################################################
-- # Script Name: rds_awr_report.sql
-- # Description: Generates an AWR-like performance report using DBA_HIST_* views
-- #              Suitable for Oracle RDS instances where AWR data is accessible.
-- # Author:      Kamal Jha
-- # Version:     1.1 (AWR Snap ID input)
-- # Usage:       Run in SQL*Plus or SQLcl. Provides prompts for Snap IDs.
-- # Requires:    Access to DBA_HIST_* views (AWR). Diagnostic Pack license needed.
-- #############################################################################

-- #############################
-- # Script Settings
-- #############################
SET TERMOUT OFF
SET ECHO OFF
SET FEEDBACK OFF
SET HEADING ON
SET VERIFY OFF
SET LINESIZE 200
SET PAGESIZE 100
SET LONG 10000
SET NUMWIDTH 15
SET SQLBLANKLINES ON

-- #############################
-- # Define Snapshot Window
-- #############################
DEFINE begin_snap_id = &begin_snap_id
DEFINE end_snap_id = &end_snap_id

-- #############################
-- # Get DBID and Instance Number for filtering AWR views
-- #############################
COLUMN dbid NEW_VALUE v_dbid NOPRINT
COLUMN instance_number NEW_VALUE v_instance_number NOPRINT
SELECT dbid FROM v$database;
SELECT instance_number FROM v$instance;

-- #############################
-- # Get Snapshot Times for display and duration calculation
-- #############################
COLUMN begin_snap_time NEW_VALUE v_begin_snap_time NOPRINT
COLUMN end_snap_time NEW_VALUE v_end_snap_time NOPRINT
COLUMN snap_duration_secs NEW_VALUE v_snap_duration_secs NOPRINT

SELECT TO_CHAR(begin_interval_time, 'YYYY-MM-DD HH24:MI:SS') AS begin_snap_time,
       (CAST(end_interval_time AS DATE) - CAST(begin_interval_time AS DATE)) * 86400 AS snap_duration_secs
FROM dba_hist_snapshot
WHERE snap_id = &begin_snap_id
  AND dbid = &v_dbid
  AND instance_number = &v_instance_number;

SELECT TO_CHAR(end_interval_time, 'YYYY-MM-DD HH24:MI:SS') AS end_snap_time
FROM dba_hist_snapshot
WHERE snap_id = &end_snap_id
  AND dbid = &v_dbid
  AND instance_number = &v_instance_number;

-- Handle case where duration might be zero or snaps invalid
VARIABLE snap_duration_secs NUMBER;
BEGIN
  :snap_duration_secs := GREATEST(1, TO_NUMBER('&v_snap_duration_secs'));
END;
/


-- #############################
-- # Generate Report Filename
-- #############################
COLUMN report_filename NEW_VALUE report_filename NOPRINT
SELECT 'rds_awr_report_' || d.name || '_' || i.instance_name || '_snap_' || &begin_snap_id || '_' || &end_snap_id || '_' || TO_CHAR(SYSDATE, 'YYYYMMDD_HH24MISS') || '.txt' AS report_filename
  FROM v$database d, v$instance i;

-- #############################
-- # Start Spooling
-- #############################
SPOOL &report_filename

-- #############################
-- # Header
-- #############################
PROMPT #############################################################################
PROMPT # Oracle Performance Report (using DBA_HIST Views - AWR)
PROMPT #############################################################################
PROMPT
PROMPT DB Name          DB Id    Instance     Inst Num Release     RAC Host
PROMPT ------------ ----------- ------------ -------- ----------- --- ------------
SELECT d.name,
       d.dbid,
       i.instance_name,
       i.instance_number,
       i.version,
       i.parallel,
       i.host_name
  FROM v$database d, v$instance i; -- Use V$ here for current info

PROMPT
PROMPT Snapshot Range: &begin_snap_id to &end_snap_id
PROMPT Snap Start Time: &v_begin_snap_time
PROMPT Snap End Time:   &v_end_snap_time
PROMPT Duration (secs): &v_snap_duration_secs
PROMPT Report Generated: Format(systimestamp, 'YYYY-MM-DD HH24:MI:SS TZR')
PROMPT

-- #############################################################################
-- # Section 1: Database Details (From Snapshot)
-- #############################################################################
PROMPT #############################################################################
PROMPT # 1. DATABASE & INSTANCE DETAILS (From Snapshot & Current)
PROMPT #############################################################################
PROMPT

PROMPT ## Instance Details from Snapshot &end_snap_id ##
COLUMN startup_time FORMAT A20 HEADING 'Startup Time'
SELECT startup_time
FROM dba_hist_database_instance
WHERE dbid = &v_dbid
  AND instance_number = &v_instance_number
  AND startup_time <= (SELECT end_interval_time FROM dba_hist_snapshot WHERE snap_id = &end_snap_id AND dbid = &v_dbid AND instance_number = &v_instance_number)
ORDER BY startup_time DESC
FETCH FIRST 1 ROW ONLY;

PROMPT
PROMPT ## Key Parameters (Current Value) ##
COLUMN name          FORMAT A30 HEADING 'Parameter Name'
COLUMN value         FORMAT A30 HEADING 'Value'
COLUMN isdefault     FORMAT A7 HEADING 'Default'
SELECT name, value, isdefault FROM v$parameter
WHERE name IN ('cpu_count', 'sga_target', 'sga_max_size', 'pga_aggregate_target', 'pga_aggregate_limit', 'memory_target', 'memory_max_target', 'parallel_max_servers', 'parallel_servers_target', 'optimizer_mode', 'statistics_level')
ORDER BY name;


PROMPT

-- #############################################################################
-- # Section 2: Load Profile (Delta between Snapshots)
-- #############################################################################
PROMPT #############################################################################
PROMPT # 2. LOAD PROFILE (Delta between Snapshots &begin_snap_id and &end_snap_id)
PROMPT #############################################################################
PROMPT

COLUMN name           FORMAT A35 HEADING 'Statistic Name'
COLUMN per_second     FORMAT 999,999,990.99 HEADING 'Per Second'
COLUMN per_txn        FORMAT 999,999,990.99 HEADING 'Per Transaction'

WITH sysstat_delta AS (
    SELECT stat_name,
           SUM(CASE WHEN snap_id = &end_snap_id THEN value ELSE -value END) as delta_value
    FROM dba_hist_sysstat
    WHERE snap_id IN (&begin_snap_id, &end_snap_id)
      AND dbid = &v_dbid
      AND instance_number = &v_instance_number
    GROUP BY stat_name
    HAVING SUM(CASE WHEN snap_id = &end_snap_id THEN value ELSE -value END) != 0 -- Exclude stats with no change
)
SELECT
    s.stat_name AS name,
    s.delta_value / &v_snap_duration_secs AS per_second,
    s.delta_value / GREATEST(1, (SELECT delta_value FROM sysstat_delta WHERE stat_name = 'user commits') + (SELECT delta_value FROM sysstat_delta WHERE stat_name = 'user rollbacks')) AS per_txn
FROM sysstat_delta s
WHERE s.stat_name IN (
    'DB time',
    'DB CPU', -- Or 'CPU used by this session' check name carefully
    'physical reads',
    'physical writes',
    'redo size',
    'session logical reads',
    'user calls',
    'parse count (total)',
    'parse count (hard)',
    'execute count',
    'user commits',
    'user rollbacks',
    'logons cumulative'
)
ORDER BY name;

-- Calculate Average Active Sessions
DECLARE
  l_db_time_us NUMBER;
  l_aas        NUMBER;
BEGIN
  SELECT SUM(CASE WHEN snap_id = &end_snap_id THEN value ELSE -value END)
  INTO l_db_time_us
  FROM dba_hist_sysstat
  WHERE stat_name = 'DB time'
    AND snap_id IN (&begin_snap_id, &end_snap_id)
    AND dbid = &v_dbid
    AND instance_number = &v_instance_number;

  l_aas := (l_db_time_us / 1000000) / GREATEST(1, &v_snap_duration_secs); -- DB Time is often in microseconds

  DBMS_OUTPUT.PUT_LINE('Average Active Sessions: ' || ROUND(l_aas, 2));
END;
/

PROMPT

-- #############################################################################
-- # Section 3: Top Wait Events (Delta between Snapshots using ASH)
-- #############################################################################
PROMPT #############################################################################
PROMPT # 3. TOP WAIT EVENTS (Based on DBA_HIST_ACTIVE_SESS_HISTORY)
PROMPT #############################################################################
PROMPT Snapshot Range: &begin_snap_id to &end_snap_id
PROMPT

PROMPT ## Top 10 Foreground Wait Events ##
COLUMN wait_class     FORMAT A15 HEADING 'Wait Class'
COLUMN event          FORMAT A40 HEADING 'Event'
COLUMN total_wait_sec FORMAT 999,999,990 HEADING 'Total Wait|Seconds'
COLUMN pct_total      FORMAT 990.99 HEADING '% Total|DB Time'

WITH ash_waits AS (
    SELECT wait_class, event_name as event, session_type, time_waited -- time_waited in ASH already accounts for sampling interval * wait time
    FROM dba_hist_active_sess_history
    WHERE snap_id > &begin_snap_id AND snap_id <= &end_snap_id -- Standard AWR interval for ASH
      AND dbid = &v_dbid
      AND instance_number = &v_instance_number
      AND session_state = 'WAITING'
      AND wait_class <> 'Idle'
),
ash_cpu AS (
    SELECT time_waited -- Treat 'CPU time' as time_waited when session_state is ON CPU
    FROM dba_hist_active_sess_history
    WHERE snap_id > &begin_snap_id AND snap_id <= &end_snap_id
      AND dbid = &v_dbid
      AND instance_number = &v_instance_number
      AND session_state = 'ON CPU'
),
agg_waits AS (
    SELECT wait_class, event, session_type, SUM(time_waited) / 1000000 as total_wait_secs -- time_waited is microseconds
    FROM ash_waits
    GROUP BY wait_class, event, session_type
),
total_db_time AS (
    SELECT (SUM(total_wait_secs) + (SELECT SUM(time_waited)/1000000 FROM ash_cpu)) as total_time
    FROM agg_waits
)
SELECT
    aw.wait_class,
    aw.event,
    ROUND(aw.total_wait_secs) AS total_wait_sec,
    ROUND((aw.total_wait_secs / GREATEST(1, (SELECT total_time FROM total_db_time))) * 100, 2) AS pct_total
FROM agg_waits aw
WHERE aw.session_type = 'FOREGROUND'
ORDER BY total_wait_sec DESC
FETCH FIRST 10 ROWS ONLY;

PROMPT
PROMPT ## Top 10 Background Wait Events ##
SELECT
    aw.wait_class,
    aw.event,
    ROUND(aw.total_wait_secs) AS total_wait_sec,
    ROUND((aw.total_wait_secs / GREATEST(1, (SELECT total_time FROM total_db_time))) * 100, 2) AS pct_total
FROM agg_waits aw -- Reusing CTEs from above
WHERE aw.session_type = 'BACKGROUND'
ORDER BY total_wait_sec DESC
FETCH FIRST 10 ROWS ONLY;

PROMPT

-- #############################################################################
-- # Section 4: Top SQL Statements (Delta between Snapshots)
-- #############################################################################
PROMPT #############################################################################
PROMPT # 4. TOP SQL STATEMENTS (Delta between Snapshots &begin_snap_id and &end_snap_id)
PROMPT #############################################################################
PROMPT

COLUMN sql_id           FORMAT A15 HEADING 'SQL ID'
COLUMN elapsed_time_s   FORMAT 999,999,990.99 HEADING 'Elapsed Time (s)|(Delta)'
COLUMN cpu_time_s       FORMAT 999,999,990.99 HEADING 'CPU Time (s)|(Delta)'
COLUMN buffer_gets      FORMAT 9,999,999,990 HEADING 'Buffer Gets|(Delta)'
COLUMN physical_reads   FORMAT 9,999,999,990 HEADING 'Physical Reads|(Delta)'
COLUMN executions       FORMAT 9,999,999,990 HEADING 'Executions|(Delta)'
COLUMN sql_text         FORMAT A60 HEADING 'SQL Text Snippet' TRUNCATED

WITH sqlstat_delta AS (
  SELECT
    sql_id,
    SUM(CASE WHEN snap_id = &end_snap_id THEN elapsed_time_delta ELSE -elapsed_time_delta END)/1000000 AS elapsed_time_s,
    SUM(CASE WHEN snap_id = &end_snap_id THEN cpu_time_delta ELSE -cpu_time_delta END)/1000000 AS cpu_time_s,
    SUM(CASE WHEN snap_id = &end_snap_id THEN buffer_gets_delta ELSE -buffer_gets_delta END) AS buffer_gets,
    SUM(CASE WHEN snap_id = &end_snap_id THEN disk_reads_delta ELSE -disk_reads_delta END) AS physical_reads,
    SUM(CASE WHEN snap_id = &end_snap_id THEN executions_delta ELSE -executions_delta END) AS executions
  FROM dba_hist_sqlstat
  WHERE snap_id IN (&begin_snap_id, &end_snap_id)
    AND dbid = &v_dbid
    AND instance_number = &v_instance_number
  GROUP BY sql_id
  HAVING SUM(CASE WHEN snap_id = &end_snap_id THEN elapsed_time_delta ELSE -elapsed_time_delta END) > 0
      OR SUM(CASE WHEN snap_id = &end_snap_id THEN cpu_time_delta ELSE -cpu_time_delta END) > 0
      OR SUM(CASE WHEN snap_id = &end_snap_id THEN executions_delta ELSE -executions_delta END) > 0
)
SELECT * FROM (
  SELECT
    sd.sql_id,
    sd.elapsed_time_s,
    sd.buffer_gets,
    sd.physical_reads,
    sd.executions,
    SUBSTR(REPLACE(st.sql_text, CHR(10), ' '), 1, 60) AS sql_text
  FROM sqlstat_delta sd
  LEFT JOIN dba_hist_sqltext st ON sd.sql_id = st.sql_id AND st.dbid = &v_dbid -- Join to get text
  ORDER BY sd.elapsed_time_s DESC
) WHERE ROWNUM <= 10;

PROMPT
PROMPT ## Top 10 SQL by CPU Time (Delta) ##
SELECT * FROM (
  SELECT
    sd.sql_id,
    sd.cpu_time_s,
    sd.buffer_gets,
    sd.physical_reads,
    sd.executions,
    SUBSTR(REPLACE(st.sql_text, CHR(10), ' '), 1, 60) AS sql_text
  FROM sqlstat_delta sd -- Reusing CTE
  LEFT JOIN dba_hist_sqltext st ON sd.sql_id = st.sql_id AND st.dbid = &v_dbid
  ORDER BY sd.cpu_time_s DESC
) WHERE ROWNUM <= 10;

PROMPT
PROMPT ## Top 10 SQL by Buffer Gets (Delta) ##
SELECT * FROM (
  SELECT
    sd.sql_id,
    sd.elapsed_time_s,
    sd.buffer_gets,
    sd.physical_reads,
    sd.executions,
    SUBSTR(REPLACE(st.sql_text, CHR(10), ' '), 1, 60) AS sql_text
  FROM sqlstat_delta sd -- Reusing CTE
  LEFT JOIN dba_hist_sqltext st ON sd.sql_id = st.sql_id AND st.dbid = &v_dbid
  ORDER BY sd.buffer_gets DESC
) WHERE ROWNUM <= 10;

PROMPT
PROMPT ## Top 10 SQL by Physical Reads (Delta) ##
SELECT * FROM (
  SELECT
    sd.sql_id,
    sd.elapsed_time_s,
    sd.buffer_gets,
    sd.physical_reads,
    sd.executions,
    SUBSTR(REPLACE(st.sql_text, CHR(10), ' '), 1, 60) AS sql_text
  FROM sqlstat_delta sd -- Reusing CTE
  LEFT JOIN dba_hist_sqltext st ON sd.sql_id = st.sql_id AND st.dbid = &v_dbid
  ORDER BY sd.physical_reads DESC
) WHERE ROWNUM <= 10;

PROMPT

-- #############################################################################
-- # Section 5: Top Lock and Latch Events (Based on Historical ASH)
-- #############################################################################
PROMPT #############################################################################
PROMPT # 5. TOP LOCK AND LATCH EVENTS (Based on DBA_HIST_ACTIVE_SESS_HISTORY)
PROMPT #############################################################################
PROMPT Snapshot Range: &begin_snap_id to &end_snap_id

PROMPT
PROMPT ## Top 10 Lock Wait Events (enq:) ##
COLUMN event          FORMAT A30 HEADING 'Lock Event (enq:)'
COLUMN total_wait_sec FORMAT 999,999,990 HEADING 'Total Wait|Seconds'
COLUMN object_name    FORMAT A30 HEADING 'Object Name|(If applicable)'
COLUMN owner          FORMAT A15 HEADING 'Owner'
COLUMN object_type    FORMAT A18 HEADING 'Object Type'

SELECT * FROM (
    SELECT
        ash.event_name AS event,
        SUM(ash.time_waited) / 1000000 AS total_wait_sec,
        o.owner,
        o.object_name,
        o.object_type
    FROM dba_hist_active_sess_history ash
    LEFT JOIN dba_objects o ON ash.current_obj# = o.object_id -- Join to DBA_OBJECTS (current name)
    WHERE ash.snap_id > &begin_snap_id AND ash.snap_id <= &end_snap_id
      AND ash.dbid = &v_dbid
      AND ash.instance_number = &v_instance_number
      AND ash.event_name LIKE 'enq:%'
      AND ash.wait_class IN ('Application', 'Concurrency', 'Configuration')
      AND ash.session_state = 'WAITING'
    GROUP BY ash.event_name, o.owner, o.object_name, o.object_type
    ORDER BY total_wait_sec DESC
) WHERE ROWNUM <= 10;


PROMPT
PROMPT ## Top 10 Latch Wait Events ##
COLUMN event          FORMAT A40 HEADING 'Latch Event'
COLUMN total_wait_sec FORMAT 999,999,990 HEADING 'Total Wait|Seconds'

SELECT * FROM (
    SELECT
        event_name as event,
        SUM(time_waited) / 1000000 AS total_wait_sec
    FROM dba_hist_active_sess_history
    WHERE snap_id > &begin_snap_id AND snap_id <= &end_snap_id
      AND dbid = &v_dbid
      AND instance_number = &v_instance_number
      AND event_name LIKE 'latch:%'
      AND wait_class = 'Concurrency'
      AND session_state = 'WAITING'
    GROUP BY event_name
    ORDER BY total_wait_sec DESC
) WHERE ROWNUM <= 10;

PROMPT

-- #############################################################################
-- # Section 6: Memory Advisory (From AWR History if available)
-- #############################################################################
PROMPT #############################################################################
PROMPT # 6. MEMORY ADVISORY (Based on DBA_HIST Views)
PROMPT #############################################################################
PROMPT Note: Showing advisory data from snapshot &end_snap_id.

PROMPT
PROMPT ## Buffer Pool Advisory (DBA_HIST_DB_CACHE_ADVICE) ##
COLUMN size_for_estimate FORMAT 99,990 HEADING 'Cache Size (MB)'
COLUMN size_factor       FORMAT 990.90 HEADING 'Size Factor'
COLUMN estd_physical_reads FORMAT 9,999,999,999,990 HEADING 'Estimated Phys Reads'
COLUMN estd_phys_read_factor FORMAT 990.90 HEADING 'Est Phys Read Factor'
SELECT
    size_for_estimate,
    size_factor,
    estd_physical_reads,
    estd_phys_read_factor
FROM dba_hist_db_cache_advice
WHERE snap_id = &end_snap_id
  AND dbid = &v_dbid
  AND instance_number = &v_instance_number
  AND advice_status = 'ON'
  AND block_size = (SELECT value FROM v$parameter WHERE name = 'db_block_size') -- Show for default block size
ORDER BY size_for_estimate;

PROMPT
PROMPT ## SGA Target Advisory (DBA_HIST_SGA_TARGET_ADVICE) ##
COLUMN sga_size          FORMAT 99,990 HEADING 'SGA Size (MB)'
COLUMN sga_size_factor   FORMAT 990.90 HEADING 'SGA Size Factor'
COLUMN estd_db_time      FORMAT 999,999,999,990 HEADING 'Estimated DB Time'
COLUMN estd_db_time_factor FORMAT 990.90 HEADING 'Est DB Time Factor'
SELECT
    sga_size,
    sga_size_factor,
    estd_db_time,
    estd_db_time_factor
FROM dba_hist_sga_target_advice
WHERE snap_id = &end_snap_id
  AND dbid = &v_dbid
  AND instance_number = &v_instance_number
  AND advice_status = 'ON'
ORDER BY sga_size;

PROMPT
PROMPT ## PGA Aggregate Target Advisory (DBA_HIST_PGA_TARGET_ADVICE) ##
COLUMN pga_target_for_estimate FORMAT 9,999,990 HEADING 'PGA Target (MB)'
COLUMN pga_target_factor       FORMAT 990.90 HEADING 'PGA Target Factor'
COLUMN advice_status           FORMAT A5 HEADING 'Status'
COLUMN bytes_processed         FORMAT 9,999,999,999,990 HEADING 'Bytes Processed'
COLUMN estd_extra_bytes_rw     FORMAT 9,999,999,999,990 HEADING 'Est Extra Bytes R/W'
COLUMN estd_pga_cache_hit_percentage FORMAT 990.99 HEADING 'Est PGA Cache Hit %'
COLUMN estd_overalloc_count    FORMAT 99,999,990 HEADING 'Est Overalloc Count'
SELECT
    pga_target_for_estimate / (1024*1024) AS pga_target_for_estimate,
    pga_target_factor,
    advice_status,
    bytes_processed,
    estd_extra_bytes_rw,
    estd_pga_cache_hit_percentage,
    estd_overalloc_count
FROM dba_hist_pga_target_advice
WHERE snap_id = &end_snap_id
  AND dbid = &v_dbid
  AND instance_number = &v_instance_number
ORDER BY pga_target_for_estimate;

PROMPT

-- #############################################################################
-- # Section 7: Hot Objects (Based on Historical ASH)
-- #############################################################################
PROMPT #############################################################################
PROMPT # 7. HOT OBJECTS (Based on DBA_HIST_ACTIVE_SESS_HISTORY)
PROMPT #############################################################################
PROMPT Top 20 Objects by sampled activity time.
PROMPT Snapshot Range: &begin_snap_id to &end_snap_id

COLUMN owner          FORMAT A20 HEADING 'Owner'
COLUMN object_name    FORMAT A30 HEADING 'Object Name'
COLUMN object_type    FORMAT A18 HEADING 'Object Type'
COLUMN activity_secs  FORMAT 999,999,990 HEADING 'Activity (Secs)|(Sampled)'
COLUMN pct_activity   FORMAT 990.99 HEADING '% Total|Activity'

WITH object_activity AS (
    SELECT
        ash.current_obj#,
        SUM(CASE WHEN ash.session_state = 'ON CPU' THEN 1000000 -- Approximate 1 sec in microsecs if no time_waited for CPU
                 WHEN ash.session_state = 'WAITING' THEN ash.time_waited
                 ELSE 0
            END) / 1000000 as activity_time_secs -- time_waited is microseconds
    FROM dba_hist_active_sess_history ash
    WHERE ash.snap_id > &begin_snap_id AND ash.snap_id <= &end_snap_id
      AND ash.dbid = &v_dbid
      AND ash.instance_number = &v_instance_number
      AND ash.current_obj# IS NOT NULL AND ash.current_obj# > 0
      AND (ash.session_state = 'ON CPU' OR (ash.session_state = 'WAITING' AND ash.wait_class <> 'Idle'))
    GROUP BY ash.current_obj#
),
total_activity AS (
    SELECT SUM(activity_time_secs) as total_secs FROM object_activity
)
SELECT * FROM (
    SELECT
        o.owner,
        o.object_name,
        o.object_type,
        oa.activity_time_secs AS activity_secs,
        (oa.activity_time_secs / GREATEST(1, (SELECT total_secs FROM total_activity))) * 100 AS pct_activity
    FROM object_activity oa
    JOIN dba_objects o ON oa.current_obj# = o.object_id -- Use current object name
    ORDER BY activity_secs DESC
) WHERE ROWNUM <= 20;


PROMPT

-- #############################################################################
-- # Section 8: Replication Wait Events (Hints from Historical ASH)
-- #############################################################################
PROMPT #############################################################################
PROMPT # 8. REPLICATION WAIT EVENTS (Hints from DBA_HIST_ACTIVE_SESS_HISTORY)
PROMPT #############################################################################
PROMPT Note: Identifying specific replication waits can be complex. Look for
PROMPT waits associated with known replication process names (PROGRAM column)
PROMPT or common replication-related wait events.
PROMPT Snapshot Range: &begin_snap_id to &end_snap_id

PROMPT
PROMPT ## Top 10 Wait Events for Potential Data Guard/GoldenGate Processes ##
PROMPT (Based on common wait classes: Network, Commit, Configuration, System I/O)
COLUMN program        FORMAT A30 HEADING 'Program Name|(Truncated)'
COLUMN event          FORMAT A40 HEADING 'Event'
COLUMN wait_class     FORMAT A15 HEADING 'Wait Class'
COLUMN total_wait_sec FORMAT 999,999,990 HEADING 'Total Wait|Seconds'

SELECT * FROM (
    SELECT
        SUBSTR(program, 1, 30) as program,
        event_name as event,
        wait_class,
        SUM(time_waited) / 1000000 as total_wait_sec
    FROM dba_hist_active_sess_history
    WHERE snap_id > &begin_snap_id AND snap_id <= &end_snap_id
      AND dbid = &v_dbid
      AND instance_number = &v_instance_number
      AND session_state = 'WAITING'
      AND wait_class IN ('Network', 'Commit', 'Configuration', 'System I/O')
      -- Add specific program filters if known, e.g.:
      -- AND (program LIKE '%RFS%' OR program LIKE '%MRP%' OR program LIKE '%LSP%' -- Data Guard examples
      --      OR program LIKE 'gg%' OR program LIKE '%replicat%' OR program LIKE '%extract%') -- GoldenGate examples
    GROUP BY SUBSTR(program, 1, 30), event_name, wait_class
    HAVING SUM(time_waited) > 0
    ORDER BY total_wait_sec DESC
) WHERE ROWNUM <= 10;

PROMPT
PROMPT ## Data Guard Lag Stats (DBA_HIST_DATAGUARD_STATS @ end snap) ##
COLUMN name  FORMAT A25 HEADING 'Metric'
COLUMN value FORMAT A20 HEADING 'Value'
COLUMN unit  FORMAT A30 HEADING 'Unit'
COLUMN time_computed FORMAT A20 HEADING 'Time Computed'
SELECT name, value, unit, TO_CHAR(time_computed, 'YYYY-MM-DD HH24:MI:SS') as time_computed
FROM dba_hist_dataguard_stats
WHERE snap_id = &end_snap_id
  AND dbid = &v_dbid
  AND instance_number = &v_instance_number
  AND name LIKE '%lag%';

PROMPT

-- #############################################################################
-- # End of Report
-- #############################################################################
PROMPT #############################################################################
PROMPT # End of Report
PROMPT # Report File: &report_filename
PROMPT #############################################################################

-- #############################
-- # Cleanup
-- #############################
SPOOL OFF
CLEAR COLUMNS
CLEAR BREAKS
CLEAR COMPUTES
SET TERMOUT ON
SET FEEDBACK ON
SET VERIFY ON
SET HEADING ON
SET LINESIZE 80
SET PAGESIZE 14
UNDEFINE begin_snap_id
UNDEFINE end_snap_id
UNDEFINE v_dbid
UNDEFINE v_instance_number
UNDEFINE v_begin_snap_time
UNDEFINE v_end_snap_time
UNDEFINE v_snap_duration_secs
UNDEFINE report_filename

-- END OF SCRIPT

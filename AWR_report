-- #############################################################################
-- # Script Name: rds_perf_report.sql
-- # Description: Generates an AWR-like performance report using V$ views
-- #              Suitable for Oracle RDS Read Replicas.
-- # Author:      Kamal Jha
-- # Version:     1.0
-- # Usage:       Run in SQL*Plus or SQLcl. Provides prompts for time window.
-- # Requires:    Access to V$ views, particularly V$ACTIVE_SESSION_HISTORY.
-- #############################################################################

-- #############################
-- # Script Settings
-- #############################
SET TERMOUT OFF
SET ECHO OFF
SET FEEDBACK OFF
SET HEADING ON
SET VERIFY OFF
SET LINESIZE 200
SET PAGESIZE 100
SET LONG 10000
SET NUMWIDTH 15
SET SQLBLANKLINES ON

-- #############################
-- # Define Time Window
-- #############################
-- Prompt user for the beginning and end timestamps for the analysis window
DEFINE begin_time = &begin_time
DEFINE end_time = &end_time

-- #############################
-- # Generate Report Filename
-- #############################
COLUMN report_filename NEW_VALUE report_filename NOPRINT
SELECT 'rds_perf_report_' || d.name || '_' || i.instance_name || '_' || TO_CHAR(SYSDATE, 'YYYYMMDD_HH24MISS') || '.txt' AS report_filename
  FROM v$database d, v$instance i;

-- #############################
-- # Start Spooling
-- #############################
SPOOL &report_filename

-- #############################
-- # Header
-- #############################
PROMPT #############################################################################
PROMPT # Oracle Performance Report (using V$ Views) for RDS Read Replica
PROMPT #############################################################################
PROMPT
PROMPT Report Time Range: &begin_time to &end_time
PROMPT Report Generated:  Format(systimestamp, 'YYYY-MM-DD HH24:MI:SS TZR')
PROMPT

-- #############################################################################
-- # Section 1: Database Details
-- #############################################################################
PROMPT #############################################################################
PROMPT # 1. DATABASE DETAILS
PROMPT #############################################################################
PROMPT

PROMPT ## Database Information ##
COLUMN name           FORMAT A15 HEADING 'DB Name'
COLUMN dbid           FORMAT 9999999999 HEADING 'DB Id'
COLUMN created        FORMAT A20 HEADING 'Created'
COLUMN log_mode       FORMAT A15 HEADING 'Log Mode'
COLUMN open_mode      FORMAT A15 HEADING 'Open Mode'
COLUMN platform_name  FORMAT A30 HEADING 'Platform'
SELECT name, dbid, created, log_mode, open_mode, platform_name FROM v$database;

PROMPT
PROMPT ## Instance Information ##
COLUMN instance_name  FORMAT A15 HEADING 'Instance Name'
COLUMN host_name      FORMAT A30 HEADING 'Host Name'
COLUMN version        FORMAT A20 HEADING 'Version'
COLUMN startup_time   FORMAT A20 HEADING 'Startup Time'
COLUMN status         FORMAT A15 HEADING 'Status'
SELECT instance_name, host_name, version, TO_CHAR(startup_time, 'YYYY-MM-DD HH24:MI') AS startup_time, status FROM v$instance;

PROMPT
PROMPT ## Key Parameters ##
COLUMN name          FORMAT A30 HEADING 'Parameter Name'
COLUMN value         FORMAT A30 HEADING 'Value'
COLUMN isdefault     FORMAT A7 HEADING 'Default'
SELECT name, value, isdefault FROM v$parameter
WHERE name IN ('cpu_count', 'sga_target', 'sga_max_size', 'pga_aggregate_target', 'pga_aggregate_limit', 'memory_target', 'memory_max_target', 'parallel_max_servers', 'parallel_servers_target', 'optimizer_mode', 'statistics_level')
ORDER BY name;

PROMPT

-- #############################################################################
-- # Section 2: Load Profile
-- #############################################################################
PROMPT #############################################################################
PROMPT # 2. LOAD PROFILE (Based on ASH samples and cumulative V$SYSSTAT)
PROMPT #############################################################################
PROMPT
PROMPT ## Activity based on V$ACTIVE_SESSION_HISTORY (&begin_time to &end_time) ##
PROMPT Note: Represents sampled activity, not exact totals like AWR.

DECLARE
  l_start_time DATE := TO_DATE('&begin_time', 'YYYY-MM-DD HH24:MI:SS');
  l_end_time   DATE := TO_DATE('&end_time', 'YYYY-MM-DD HH24:MI:SS');
  l_duration_secs NUMBER;
  l_db_time_secs  NUMBER;
  l_avg_active_sessions NUMBER;
BEGIN
  l_duration_secs := GREATEST(1, (l_end_time - l_start_time) * 86400); -- Avoid division by zero

  SELECT COUNT(*) INTO l_db_time_secs
  FROM v$active_session_history
  WHERE sample_time BETWEEN l_start_time AND l_end_time
    AND session_state = 'WAITING' AND wait_class <> 'Idle' -- Waiting non-idle
     OR session_state = 'ON CPU';                          -- On CPU

  l_avg_active_sessions := l_db_time_secs / l_duration_secs;

  DBMS_OUTPUT.PUT_LINE('Duration of Analysis Window (sec): ' || ROUND(l_duration_secs, 2));
  DBMS_OUTPUT.PUT_LINE('Total DB Time (sampled sec):       ' || l_db_time_secs);
  DBMS_OUTPUT.PUT_LINE('Average Active Sessions (sampled): ' || ROUND(l_avg_active_sessions, 2));
END;
/

PROMPT
PROMPT ## Cumulative Statistics from V$SYSSTAT (Since Instance Startup) ##
PROMPT Note: These are totals since startup, NOT interval specific.
COLUMN name           FORMAT A35 HEADING 'Statistic Name'
COLUMN value          FORMAT 999,999,999,999,999 HEADING 'Total Value'
SELECT name, value
FROM v$sysstat
WHERE name IN (
    'DB time', -- Cumulative DB Time stat (often different from ASH calculation)
    'CPU used by this session', -- Might reflect cumulative CPU for sys/bg processes
    'physical reads',
    'physical writes',
    'redo size',
    'session logical reads',
    'user calls',
    'parse count (total)',
    'parse count (hard)',
    'execute count',
    'user commits',
    'user rollbacks',
    'logons cumulative'
)
ORDER BY name;

PROMPT

-- #############################################################################
-- # Section 3: Top Wait Events
-- #############################################################################
PROMPT #############################################################################
PROMPT # 3. TOP WAIT EVENTS (Based on V$ACTIVE_SESSION_HISTORY)
PROMPT #############################################################################
PROMPT Time Range: &begin_time to &end_time
PROMPT

PROMPT ## Top 10 Foreground Wait Events ##
COLUMN wait_class     FORMAT A15 HEADING 'Wait Class'
COLUMN event          FORMAT A40 HEADING 'Event'
COLUMN total_wait_sec FORMAT 999,999,990 HEADING 'Total Wait|Seconds'
COLUMN pct_total      FORMAT 990.99 HEADING '% Total|DB Time'

WITH ash_waits AS (
    SELECT wait_class, event, session_type, COUNT(*) as wait_count
    FROM v$active_session_history
    WHERE sample_time BETWEEN TO_DATE('&begin_time', 'YYYY-MM-DD HH24:MI:SS') AND TO_DATE('&end_time', 'YYYY-MM-DD HH24:MI:SS')
      AND session_state = 'WAITING'
      AND wait_class <> 'Idle'
    GROUP BY wait_class, event, session_type
),
total_db_time AS (
    SELECT SUM(wait_count) as total_samples
    FROM ash_waits
    UNION ALL -- Add CPU time
    SELECT COUNT(*)
    FROM v$active_session_history
    WHERE sample_time BETWEEN TO_DATE('&begin_time', 'YYYY-MM-DD HH24:MI:SS') AND TO_DATE('&end_time', 'YYYY-MM-DD HH24:MI:SS')
      AND session_state = 'ON CPU'
)
SELECT
    aw.wait_class,
    aw.event,
    aw.wait_count AS total_wait_sec,
    (aw.wait_count / GREATEST(1, (SELECT SUM(total_samples) FROM total_db_time))) * 100 AS pct_total
FROM ash_waits aw
WHERE aw.session_type = 'FOREGROUND'
ORDER BY total_wait_sec DESC
FETCH FIRST 10 ROWS ONLY; -- Or use ROWNUM <= 10 for older Oracle versions

PROMPT
PROMPT ## Top 10 Background Wait Events ##
SELECT
    aw.wait_class,
    aw.event,
    aw.wait_count AS total_wait_sec,
    (aw.wait_count / GREATEST(1, (SELECT SUM(total_samples) FROM total_db_time))) * 100 AS pct_total
FROM ash_waits aw -- Reusing CTEs from above
WHERE aw.session_type = 'BACKGROUND'
ORDER BY total_wait_sec DESC
FETCH FIRST 10 ROWS ONLY; -- Or use ROWNUM <= 10 for older Oracle versions

PROMPT

-- #############################################################################
-- # Section 4: Top SQL Statements
-- #############################################################################
PROMPT #############################################################################
PROMPT # 4. TOP SQL STATEMENTS (Based on V$ACTIVE_SESSION_HISTORY Activity)
PROMPT #############################################################################
PROMPT Time Range: &begin_time to &end_time
PROMPT Note: Elapsed/CPU time from ASH samples. Gets/Reads/Execs are CUMULATIVE totals from V$SQLSTATS.

COLUMN sql_id           FORMAT A15 HEADING 'SQL ID'
COLUMN elapsed_time_s   FORMAT 999,999,990 HEADING 'Elapsed Time (s)|(Sampled)'
COLUMN cpu_time_s       FORMAT 999,999,990 HEADING 'CPU Time (s)|(Sampled)'
COLUMN buffer_gets      FORMAT 9,999,999,990 HEADING 'Buffer Gets|(Cumulative)'
COLUMN physical_reads   FORMAT 9,999,999,990 HEADING 'Physical Reads|(Cumulative)'
COLUMN executions       FORMAT 9,999,999,990 HEADING 'Executions|(Cumulative)'
COLUMN sql_text         FORMAT A60 HEADING 'SQL Text Snippet' TRUNCATED

WITH ash_sql_activity AS (
    SELECT
        sql_id,
        SUM(CASE WHEN session_state = 'ON CPU' THEN 1 ELSE 0 END) as cpu_secs,
        COUNT(*) as elapsed_secs
    FROM v$active_session_history
    WHERE sample_time BETWEEN TO_DATE('&begin_time', 'YYYY-MM-DD HH24:MI:SS') AND TO_DATE('&end_time', 'YYYY-MM-DD HH24:MI:SS')
      AND sql_id IS NOT NULL
      AND (session_state = 'ON CPU' OR (session_state = 'WAITING' AND wait_class <> 'Idle'))
    GROUP BY sql_id
)
SELECT * FROM (
    SELECT
        a.sql_id,
        a.elapsed_secs AS elapsed_time_s,
        s.buffer_gets,
        s.disk_reads AS physical_reads,
        s.executions,
        SUBSTR(REPLACE(s.sql_text, CHR(10), ' '), 1, 60) AS sql_text
    FROM ash_sql_activity a
    JOIN v$sqlstats s ON a.sql_id = s.sql_id
    ORDER BY elapsed_time_s DESC
) WHERE ROWNUM <= 10;

PROMPT
PROMPT ## Top 10 SQL by CPU Time (Sampled) ##
SELECT * FROM (
    SELECT
        a.sql_id,
        a.cpu_secs AS cpu_time_s,
        s.buffer_gets,
        s.disk_reads AS physical_reads,
        s.executions,
        SUBSTR(REPLACE(s.sql_text, CHR(10), ' '), 1, 60) AS sql_text
    FROM ash_sql_activity a -- Reusing CTE
    JOIN v$sqlstats s ON a.sql_id = s.sql_id
    WHERE a.cpu_secs > 0
    ORDER BY cpu_time_s DESC
) WHERE ROWNUM <= 10;

PROMPT
PROMPT ## Top 10 SQL by Buffer Gets (Cumulative) ##
SELECT * FROM (
    SELECT
        a.sql_id,
        a.elapsed_secs AS elapsed_time_s,
        s.buffer_gets,
        s.disk_reads AS physical_reads,
        s.executions,
        SUBSTR(REPLACE(s.sql_text, CHR(10), ' '), 1, 60) AS sql_text
    FROM ash_sql_activity a -- Reusing CTE
    JOIN v$sqlstats s ON a.sql_id = s.sql_id
    WHERE s.buffer_gets > 0
    ORDER BY s.buffer_gets DESC
) WHERE ROWNUM <= 10;

PROMPT
PROMPT ## Top 10 SQL by Physical Reads (Cumulative) ##
SELECT * FROM (
    SELECT
        a.sql_id,
        a.elapsed_secs AS elapsed_time_s,
        s.buffer_gets,
        s.disk_reads AS physical_reads,
        s.executions,
        SUBSTR(REPLACE(s.sql_text, CHR(10), ' '), 1, 60) AS sql_text
    FROM ash_sql_activity a -- Reusing CTE
    JOIN v$sqlstats s ON a.sql_id = s.sql_id
    WHERE s.disk_reads > 0
    ORDER BY s.disk_reads DESC
) WHERE ROWNUM <= 10;

PROMPT

-- #############################################################################
-- # Section 5: Top Lock and Latch Events
-- #############################################################################
PROMPT #############################################################################
PROMPT # 5. TOP LOCK AND LATCH EVENTS (Based on V$ACTIVE_SESSION_HISTORY)
PROMPT #############################################################################
PROMPT Time Range: &begin_time to &end_time

PROMPT
PROMPT ## Top 10 Lock Wait Events (enq:) ##
COLUMN event          FORMAT A30 HEADING 'Lock Event (enq:)'
COLUMN total_wait_sec FORMAT 999,999,990 HEADING 'Total Wait|Seconds'
COLUMN object_name    FORMAT A30 HEADING 'Object Name|(If applicable)'
COLUMN owner          FORMAT A15 HEADING 'Owner'
COLUMN object_type    FORMAT A18 HEADING 'Object Type'

SELECT * FROM (
    SELECT
        ash.event,
        COUNT(*) AS total_wait_sec,
        o.owner,
        o.object_name,
        o.object_type
    FROM v$active_session_history ash
    LEFT JOIN dba_objects o ON ash.current_obj# = o.object_id -- Use DBA_OBJECTS if available, else V$OBJECTS might work
    WHERE ash.sample_time BETWEEN TO_DATE('&begin_time', 'YYYY-MM-DD HH24:MI:SS') AND TO_DATE('&end_time', 'YYYY-MM-DD HH24:MI:SS')
      AND ash.event LIKE 'enq:%'
      AND ash.wait_class IN ('Application', 'Concurrency', 'Configuration') -- Common lock classes
    GROUP BY ash.event, o.owner, o.object_name, o.object_type
    ORDER BY total_wait_sec DESC
) WHERE ROWNUM <= 10;

PROMPT
PROMPT ## Top 10 Latch Wait Events ##
COLUMN event          FORMAT A40 HEADING 'Latch Event'
COLUMN total_wait_sec FORMAT 999,999,990 HEADING 'Total Wait|Seconds'

SELECT * FROM (
    SELECT
        event,
        COUNT(*) AS total_wait_sec
    FROM v$active_session_history
    WHERE sample_time BETWEEN TO_DATE('&begin_time', 'YYYY-MM-DD HH24:MI:SS') AND TO_DATE('&end_time', 'YYYY-MM-DD HH24:MI:SS')
      AND event LIKE 'latch:%'
      AND wait_class = 'Concurrency'
    GROUP BY event
    ORDER BY total_wait_sec DESC
) WHERE ROWNUM <= 10;

PROMPT

-- #############################################################################
-- # Section 6: Memory Advisory (Cumulative since Startup)
-- #############################################################################
PROMPT #############################################################################
PROMPT # 6. MEMORY ADVISORY (Based on V$ Views - Cumulative Data)
PROMPT #############################################################################
PROMPT Note: Advisory data reflects workload since instance startup.

PROMPT
PROMPT ## Buffer Pool Advisory (V$DB_CACHE_ADVICE) ##
COLUMN size_for_estimate FORMAT 99,990 HEADING 'Cache Size (MB)'
COLUMN size_factor       FORMAT 990.90 HEADING 'Size Factor'
COLUMN estd_physical_reads FORMAT 9,999,999,999,990 HEADING 'Estimated Phys Reads'
COLUMN estd_phys_read_factor FORMAT 990.90 HEADING 'Est Phys Read Factor'
SELECT
    size_for_estimate,
    size_factor,
    estd_physical_reads,
    estd_phys_read_factor
FROM v$db_cache_advice
WHERE advice_status = 'ON'
  AND block_size = (SELECT value FROM v$parameter WHERE name = 'db_block_size') -- Show for default block size
ORDER BY size_for_estimate;

PROMPT
PROMPT ## SGA Target Advisory (V$SGA_TARGET_ADVICE) ##
COLUMN sga_size          FORMAT 99,990 HEADING 'SGA Size (MB)'
COLUMN sga_size_factor   FORMAT 990.90 HEADING 'SGA Size Factor'
COLUMN estd_db_time      FORMAT 999,999,999,990 HEADING 'Estimated DB Time'
COLUMN estd_db_time_factor FORMAT 990.90 HEADING 'Est DB Time Factor'
SELECT
    sga_size,
    sga_size_factor,
    estd_db_time,
    estd_db_time_factor
FROM v$sga_target_advice
WHERE advice_status = 'ON'
ORDER BY sga_size;

PROMPT
PROMPT ## PGA Aggregate Target Advisory (V$PGA_TARGET_ADVICE) ##
COLUMN pga_target_for_estimate FORMAT 9,999,990 HEADING 'PGA Target (MB)'
COLUMN pga_target_factor       FORMAT 990.90 HEADING 'PGA Target Factor'
COLUMN advice_status           FORMAT A5 HEADING 'Status'
COLUMN bytes_processed         FORMAT 9,999,999,999,990 HEADING 'Bytes Processed'
COLUMN estd_extra_bytes_rw     FORMAT 9,999,999,999,990 HEADING 'Est Extra Bytes R/W'
COLUMN estd_pga_cache_hit_percentage FORMAT 990.99 HEADING 'Est PGA Cache Hit %'
COLUMN estd_overalloc_count    FORMAT 99,999,990 HEADING 'Est Overalloc Count'
SELECT
    pga_target_for_estimate / (1024*1024) AS pga_target_for_estimate,
    pga_target_factor,
    advice_status,
    bytes_processed,
    estd_extra_bytes_rw,
    estd_pga_cache_hit_percentage,
    estd_overalloc_count
FROM v$pga_target_advice
ORDER BY pga_target_for_estimate;

PROMPT

-- #############################################################################
-- # Section 7: Hot Objects
-- #############################################################################
PROMPT #############################################################################
PROMPT # 7. HOT OBJECTS (Based on V$ACTIVE_SESSION_HISTORY)
PROMPT #############################################################################
PROMPT Top 20 Objects by sampled activity time.
PROMPT Time Range: &begin_time to &end_time

COLUMN owner          FORMAT A20 HEADING 'Owner'
COLUMN object_name    FORMAT A30 HEADING 'Object Name'
COLUMN object_type    FORMAT A18 HEADING 'Object Type'
COLUMN activity_secs  FORMAT 999,999,990 HEADING 'Activity (Secs)|(Sampled)'
COLUMN pct_activity   FORMAT 990.99 HEADING '% Total|Activity'

WITH object_activity AS (
    SELECT
        ash.current_obj#,
        COUNT(*) as activity_count
    FROM v$active_session_history ash
    WHERE ash.sample_time BETWEEN TO_DATE('&begin_time', 'YYYY-MM-DD HH24:MI:SS') AND TO_DATE('&end_time', 'YYYY-MM-DD HH24:MI:SS')
      AND ash.current_obj# IS NOT NULL AND ash.current_obj# > 0 -- Valid object reference
      AND (ash.session_state = 'ON CPU' OR (ash.session_state = 'WAITING' AND ash.wait_class <> 'Idle'))
    GROUP BY ash.current_obj#
),
total_activity AS (
    SELECT SUM(activity_count) as total_samples FROM object_activity
)
SELECT * FROM (
    SELECT
        o.owner,
        o.object_name,
        o.object_type,
        oa.activity_count AS activity_secs,
        (oa.activity_count / GREATEST(1, (SELECT total_samples FROM total_activity))) * 100 AS pct_activity
    FROM object_activity oa
    JOIN dba_objects o ON oa.current_obj# = o.object_id -- Use DBA_OBJECTS if available
    ORDER BY activity_secs DESC
) WHERE ROWNUM <= 20;

PROMPT

-- #############################################################################
-- # Section 8: Replication Wait Events (GoldenGate / Data Guard Hints)
-- #############################################################################
PROMPT #############################################################################
PROMPT # 8. REPLICATION WAIT EVENTS (Hints from V$ACTIVE_SESSION_HISTORY)
PROMPT #############################################################################
PROMPT Note: Identifying specific replication waits can be complex. Look for
PROMPT waits associated with known replication process names (PROGRAM column)
PROMPT or common replication-related wait events.
PROMPT Time Range: &begin_time to &end_time

PROMPT
PROMPT ## Top 10 Wait Events for Potential Data Guard/GoldenGate Processes ##
PROMPT (Based on common wait classes: Network, Commit, Configuration, System I/O)
COLUMN program        FORMAT A30 HEADING 'Program Name|(Truncated)'
COLUMN event          FORMAT A40 HEADING 'Event'
COLUMN wait_class     FORMAT A15 HEADING 'Wait Class'
COLUMN total_wait_sec FORMAT 999,999,990 HEADING 'Total Wait|Seconds'

SELECT * FROM (
    SELECT
        SUBSTR(program, 1, 30) as program,
        event,
        wait_class,
        COUNT(*) as total_wait_sec
    FROM v$active_session_history
    WHERE sample_time BETWEEN TO_DATE('&begin_time', 'YYYY-MM-DD HH24:MI:SS') AND TO_DATE('&end_time', 'YYYY-MM-DD HH24:MI:SS')
      AND session_state = 'WAITING'
      AND wait_class IN ('Network', 'Commit', 'Configuration', 'System I/O') -- Classes often relevant to replication
      -- Add specific program filters if known, e.g.:
      -- AND (program LIKE '%RFS%' OR program LIKE '%MRP%' OR program LIKE '%LSP%' -- Data Guard examples
      --      OR program LIKE 'gg%' OR program LIKE '%replicat%' OR program LIKE '%extract%') -- GoldenGate examples
    GROUP BY SUBSTR(program, 1, 30), event, wait_class
    ORDER BY total_wait_sec DESC
) WHERE ROWNUM <= 10;

PROMPT
PROMPT ## Data Guard Current Lag Stats (if applicable, V$DATAGUARD_STATS) ##
COLUMN name  FORMAT A25 HEADING 'Metric'
COLUMN value FORMAT A20 HEADING 'Value'
COLUMN unit  FORMAT A30 HEADING 'Unit'
COLUMN time_computed FORMAT A20 HEADING 'Time Computed'
SELECT name, value, unit, time_computed FROM v$dataguard_stats WHERE name LIKE '%lag%';

PROMPT

-- #############################################################################
-- # End of Report
-- #############################################################################
PROMPT #############################################################################
PROMPT # End of Report
PROMPT # Report File: &report_filename
PROMPT #############################################################################

-- #############################
-- # Cleanup
-- #############################
SPOOL OFF
CLEAR COLUMNS
CLEAR BREAKS
CLEAR COMPUTES
SET TERMOUT ON
SET FEEDBACK ON
SET VERIFY ON
SET HEADING ON
SET LINESIZE 80
SET PAGESIZE 14
UNDEFINE begin_time
UNDEFINE end_time
UNDEFINE report_filename

-- END OF SCRIPT
